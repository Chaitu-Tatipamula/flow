package com.mastercard.test.flow.assrt.filter.cli;

import org.junit.jupiter.api.Test;

import com.mastercard.test.flow.assrt.filter.mock.Mdl;

/**
 * Exercises error-feedback behaviour
 */
@SuppressWarnings("static-method")
class ErrorsTest extends AbstractFilterTest {

	/**
	 * We trigger some user input errors
	 */
	@Test
	void errors() {
		Mdl mdl = new Mdl().withFlows(
				"first flow [foo, bar]" );

		// run the cli
		new FilterCliHarness()
				.expect( "tags are displayed", ""
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "│ bar foo                                                                      │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				// invoke a bad command
				.input( "blah\t\n" )
				.expect( "errr is displayed", ""
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "│ bar foo                                                                      │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘\n"
						+ "┌─ Error ──────────────────────────────────────────────────────────────────────┐\n"
						+ "│ Unrecognised input 'blah'                                                    │\n"
						+ "│ Invoke 'help' to see available commands                                      │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				// add tag filter
				.input( "+foo\n" )
				.expect( "error goes away again", ""
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "│ bar                                                                          │\n"
						+ "├─ Included ───────────────────────────────────────────────────────────────────┤\n"
						+ "│ foo                                                                          │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				.expectFlowConstruction( "No flow access yet",
						false )
				// proceed to index phase
				.input( "\n" )
				.expect( "flow is displayed", ""
						+ "┌─ Flows ──────────────────────────────────────────────────────────────────────┐\n"
						+ "│ 1 first flow bar                                                             │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘\n"
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "│ bar                                                                          │\n"
						+ "├─ Included ───────────────────────────────────────────────────────────────────┤\n"
						+ "│ foo                                                                          │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				.expectFlowConstruction( "we're now displaying flows, so we have to construct them",
						true )
				// do a bad command
				.input( "blah\n" )
				.expect( "errors are displayed", ""
						+ "┌─ Flows ──────────────────────────────────────────────────────────────────────┐\n"
						+ "│ 1 first flow bar                                                             │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘\n"
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "│ bar                                                                          │\n"
						+ "├─ Included ───────────────────────────────────────────────────────────────────┤\n"
						+ "│ foo                                                                          │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘\n"
						+ "┌─ Error ──────────────────────────────────────────────────────────────────────┐\n"
						+ "│ Unrecognised input 'blah'                                                    │\n"
						+ "│ Invoke 'help' to see available commands                                      │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				// choose a flow
				.input( "+1\t\n" )
				.expect( "error is hidden again", ""
						+ "┌─ Flows ──────────────────────────────────────────────────────────────────────┐\n"
						+ "│ 1 first flow                                                                 │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘\n"
						+ "┌─ Tags ───────────────────────────────────────────────────────────────────────┐\n"
						+ "├─ Included ───────────────────────────────────────────────────────────────────┤\n"
						+ "│ bar foo                                                                      │\n"
						+ "└──────────────────────────────────────────────────────────────────────────────┘",
						"> " )
				.input( "\n\n" )
				.on( mdl );
	}
}
